name: Create EKS Cluster

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      # Paso 1: Checkout del código fuente
      - name: Checkout code
        uses: actions/checkout@v3

      # Paso 2: Configurar Terraform CLI
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.8.4  # Versión de Terraform que deseas usar

      # Paso 3: Configurar las credenciales de AWS (usando los secretos de GitHub)
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: sa-east-1  # Cambia la región según tus necesidades

      # Paso 4: Inicializar Terraform (esto configurará el backend S3)
      - name: Initialize Terraform
        run: terraform init

      # Paso 5: Ejecutar Terraform Plan y guardar el plan en un archivo
      - name: Terraform Plan
        id: plan
        run: terraform plan -out=tfplan

      # Paso 6: Ejecutar Terraform Apply solo cuando el plan sea exitoso y en la rama main
      - name: Terraform Apply
        run: terraform apply -auto-approve

      - name: Configure Kubernetes client
        uses: silverlyra/setup-aws-eks@v0.1
        with:
          cluster: example-eks-cluster

      - name: Install Helm
        uses: azure/setup-helm@v2

      - name: Add Helm Repositories
        run: |
          helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo add grafana https://grafana.github.io/helm-charts

      - name: Create Nginx Deployment
        run: |
          cat > nginx-deployment.yaml << EOF
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: nginx
            namespace: nginx
          spec:
            replicas: 2
            selector:
              matchLabels:
                app: nginx
            template:
              metadata:
                labels:
                  app: nginx
              spec:
                containers:
                - name: nginx
                  image: nginx:latest
                  ports:
                  - containerPort: 80
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: nginx-service
            namespace: nginx
          spec:
            selector:
              app: nginx
            ports:
            - port: 80
              targetPort: 80
            type: LoadBalancer
          EOF

          kubectl create namespace nginx --dry-run=client -o yaml | kubectl apply -f -
          kubectl apply -f nginx-deployment.yaml

      - name: Verify Deployment
        run: |
          kubectl get deployments -n nginx
          kubectl get pods -n nginx
          kubectl get svc -n nginx

      - name: Install Prometheus and Grafana
        run: |
          helm install prometheus prometheus-community/prometheus
          helm install grafana grafana/grafana

      # Obtener la URL del servicio de Nginx y la contraseña de Grafana
      - name: Get RUL Nginx Access
        run: |
          kubectl get svc nginx-service -n nginx
